# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
   ruby: circleci/ruby@1.2.0
   node: circleci/node@5.0.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
   build:
      working_directory: ~/repo
      docker:
       - image: cimg/ruby:2.7.5-node
         environment:
            POSTGRES_HOST_AUTH_METHOD: trust
      executor: ruby/default
      steps:
       - checkout
       # - run: gem install bundler -v 2.1.4
       - run: bundle install
       # - run: yarn
       - run:
            name: Setup Code Climate test-reporter
            command: |
               # download test reporter as a static binary
               mkdir -p tmp/
               curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
               chmod +x ./tmp/cc-test-reporter
       - persist_to_workspace:
            root: tmp
            paths:
             - cc-test-reporter
   test:  # our next job, called "test"
      # we run "parallel job containers" to enable speeding up our tests;
      # this splits our tests across multiple containers.
      working_directory: ~/repo
      parallelism: 3
      # here we set TWO docker images.
      docker:
       - image: cimg/ruby:2.7.5-node
       - image: cimg/redis:6.2.6
       - image: circleci/postgres:12
         auth:
            username: dneslov
            password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
         environment: # add POSTGRES environment variables.
            POSTGRES_HOST_AUTH_METHOD: trust
            POSTGRES_USER: dneslov
            POSTGRES_DB: dneslov_test
            POSTGRES_PASSWORD: ""
      environment:
         BUNDLE_JOBS: "3"
         BUNDLE_RETRY: "3"
         PGHOST: 127.0.0.1
         PGUSER: dneslov
         PGPASSWORD: ""
         RAILS_ENV: test
         PARALLEL_WORKERS: "1"
         REDIS_CACHE_URL: redis://127.0.0.1:6379
         REDIS_QUEUE_URL: redis://127.0.0.1:6379
         CC_TEST_REPORTER_ID: $_CC_TEST_REPORTER_ID
         GITHUB_CLIENT_URL: $_GITHUB_CLIENT_URL
         JWT_SECRET: $_JWT_SECRET
         GITHUB_HTTP_HOST: $_GITHUB_HTTP_HOST
         GITHUB_REDIRECT_URL: $_GITHUB_REDIRECT_URL
         GITHUB_ACCESS_TOKEN_URL: $_GITHUB_ACCESS_TOKEN_URL
         GITHUB_CLIENT_ID: $_GITHUB_CLIENT_ID
         GITHUB_CLIENT_SECRET: $_GITHUB_CLIENT_SECRET
         GITHUB_USER_INFO_URL: $_GITHUB_USER_INFO_URL
      steps:
       - checkout
       - attach_workspace:
            at: ~/repo/tmp
       - ruby/install-deps
         # - node/install-packages:
         #   pkg-manager: yarn
         # Here we make sure that the secondary container boots
         # up before we run operations on the database.
       - run:
            name: Wait for DB
            command: dockerize -wait tcp://localhost:5432 -timeout 1m
       - run:
            name: Start Redis
            command: sudo service redis-server restart
       - run:
            name: Database setup
            command: bundle exec rails db:schema:load --trace
       - run: redis-cli ping
       # Run rspec in parallel
       - run:
            name: Run tests
            command: |
               bundle exec rake
               ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.backend.json coverage/backend/.resultset.json
               ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 2 -o tmp/codeclimate.total.json
               ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json
       - persist_to_workspace:
            root: tmp
            paths:
             - codeclimate.frontend.json
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
   version: 2
   build_and_test:     # The name of our workflow is "build_and_test"
      jobs:             # The list of jobs we run as part of this workflow.
       - build         # Run build first.
       - test:         # Then run test,
            requires:   # Test requires that build passes for it to run.
             - build   # Finally, run the build job.
